/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2023-01-06 04:38:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>WebSocket 활용 index2.jsp 소스 코딩</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <form>\r\n");
      out.write("    \t<!-- 유저명을 입력하는 텍스트 박스 생성(기본값은 anonymouse(익명)) -->\r\n");
      out.write("    \t<input id=\"user\" type=\"text\" value=\"anonymous\">\r\n");
      out.write("\t    <!-- 송신 메시지를 작성하는 텍스트 박스 -->\r\n");
      out.write("\t    <input id=\"textMessage\" type=\"text\">\r\n");
      out.write("\t    <!-- 메시지 송신을 처리하는 버튼 -->\r\n");
      out.write("\t    <input onclick=\"sendMessage()\" value=\"Send\" type=\"button\">\r\n");
      out.write("\t    <!-- WebSocket 접속 종료하는 버튼 -->\r\n");
      out.write("\t    <input onclick=\"disconnect()\" value=\"Disconnect\" type=\"button\">\r\n");
      out.write("    </form>\r\n");
      out.write("    <br>\r\n");
      out.write("    <!-- 콘솔 메시지의 역할을 하는 로그 텍스트 영역 생성(수신 메시지도 표시합니다) -->\r\n");
      out.write("    <textarea rows=\"10\" cols=\"50\" id=\"messageTextArea\"></textarea>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    \t// broadsocket 호스트 명으로 지정합니다.\r\n");
      out.write("    \t// WebSocket 객체 생성(자동으로 접속을 시작합니다. onopen 함수 호출)\r\n");
      out.write("    \t// 본인 PC 포트를 적용합니다. (예시 : localhost:9005)\r\n");
      out.write("    \tvar webSocket = new WebSocket(\"ws://192.168.0.185:9005/broadsocket\");\r\n");
      out.write("    \t// 콘솔 텍스트 영역 객체 생성\r\n");
      out.write("    \tvar messageTextArea = document.getElementById(\"messageTextArea\");\r\n");
      out.write("    \t// WebSocket 서버와 접속이 되면 호출되는 함수 정의\r\n");
      out.write("    \twebSocket.onopen = function(message) {\r\n");
      out.write("\t\t\t// 콘솔 텍스트에 메시지를 출력 처리 합니다.\r\n");
      out.write("    \t\tmessageTextArea.value += \"Server connect..\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// WebSocket 서버와 접속이 끊기면 호출되는 함수 정의\r\n");
      out.write("\t\twebSocket.onclose = function(message) {\r\n");
      out.write("\t\t\t// 콘솔 텍스트에 메시지를 출력 처리 합니다.\r\n");
      out.write("\t\t\tmessageTextArea.value += \"Server Disconnect...\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// WebSocket 서버와 통신 중에 에러가 발생하면 요청되는 함수 정의\r\n");
      out.write("\t\twebSocket.onerror = function(message) {\r\n");
      out.write("\t\t\t// 콘솔 텍스트에 메시지를 출력 처리 합니다.\r\n");
      out.write("\t\t\tmessageTextArea.value += \"error...\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// WebSocket 서버로부터 메시지가 오면 호출되는 함수 정의\r\n");
      out.write("\t\twebSocket.onmessage = function(message) {\r\n");
      out.write("\t\t\t// 콘솔 텍스트에 메시지를 출력합니다.\r\n");
      out.write("\t\t\tmessageTextArea.value +=  message.data + \"\\n\";\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// Send 버튼을 누르면 호출되는 함수 정의\r\n");
      out.write("\t\tfunction sendMessage() {\r\n");
      out.write("\t\t\t// 유저명 텍스트 박스 객체를 생성 처리함\r\n");
      out.write("\t\t\tvar user = document.getElementById(\"user\");\r\n");
      out.write("\t\t\t// 송신 메시지를 작성하는 텍스트 박스 오브젝트(객체)를 생성 처리합니다.\r\n");
      out.write("\t\t\tvar message = document.getElementById(\"textMessage\");\r\n");
      out.write("\t\t\t// 콘솔 텍스트에 메시지를 출력 처리 합니다.\r\n");
      out.write("\t\t\tmessageTextArea.value += user.value + \"(me) =>\" + message.value + \"\\n\";\r\n");
      out.write("\t\t\t// WebSocket 서버에 메시지를 송신(전송) 처리 합니다. (형식 : {{유저명}} 메세지)\r\n");
      out.write("\t\t\twebSocket.send(\"{{\"+ user.value +\"}}\" + message.value);\r\n");
      out.write("\t\t\t// 송신 메시지를 작성하는 텍스트 박스를 초기화합니다.\r\n");
      out.write("\t\t\tmessage.value = \"\";\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// Disconnect 버튼을 누르면 호출되는 함수 정의\r\n");
      out.write("\t\tfunction disconnect() {\r\n");
      out.write("\t\t\t// WebSocket 접속 해제\r\n");
      out.write("\t\t\twebSocket.close();\r\n");
      out.write("\t\t}\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
